from Crypto.Util.number import *
from Crypto.Cipher import ChaCha20
import hashlib

flag = b"Securinets{**********************}"

class Complex:
    def __init__(self, re, im):
        self.re = re
        self.im = im

    def __mul__(self, c):
        re_ = self.re * c.re - self.im * c.im
        im_ = self.re * c.im + self.im * c.re
        return Complex(re_, im_)

    def __eq__(self, c):
        return self.re == c.re and self.im == c.im

    def __rshift__(self, m):
        return Complex(self.re >> m, self.im >> m)

    def __lshift__(self, m):
        return Complex(self.re << m, self.im << m)

    def __str__(self):
        if self.im == 0:
            return str(self.re)
        elif self.re == 0:
            if abs(self.im) == 1:
                return f"{'-' if self.im < 0 else ''}i"
            else:
                return f"{self.im}i"
        else:
            return f"{self.re} {'+' if self.im > 0 else '-'} {abs(self.im)}i"

    def tolist(self):
        return [self.re, self.im]

def complex_pow(c, exp, n):
    result = Complex(1, 0)
    while exp > 0:
        if exp & 1:
            result = result * c
            result.re = result.re % n
            result.im = result.im % n
        c = c * c
        c.re = c.re % n
        c.im = c.im % n
        exp >>= 1
    return result

bits = 128
p = getPrime(1024)
q = getPrime(1024)
n = p * q
m = Complex(getRandomRange(1, n), getRandomRange(1, n))
e = 3
c = complex_pow(m, e, n)

print(f"n = {n}")
print(f"mh = {(m >> bits << bits).tolist()}")
print(f"C = {c.tolist()}")
print(f"enc = {ChaCha20.new(key=hashlib.sha256(str(m.re + m.im).encode()).digest(), nonce=b'Pr3d1ctmyxjj').encrypt(flag)}")


#n = 19714869610235268568499454008059246681306227826886953249104617185099386012421196492662232370902519850308462898508198702119395868974672974691945103576848722313155152315626004168635094926524860625295792360017378413958927702952104072030932642308259477408539703334573333633756689788724532968854485123338521181653957741747510959792077893371381281779941923207751633433266027853481401999460910940309829024956893780190358613127335665463298119829018065194680039515957392609965950978285420253937137731413207621496462033119888098852519550437348156422710688219073154781215204511797079888848645952775305471334585797159954045925629
#mh = [6184968146497201632109049053911125270002469551069374213975256830684509297199254093177173367386602520654859734074636475655757057100829035147936710352184301044307166794873274116097933799725665285638183301131605548299500985274776539938192932651709909119462096114435729333766740136354198283909359586306862026645212629020963031773940911069750006251080837030893379351928105345820351687272571345393556585807445418434386681501074023790067620122402205332049828692666196310065829136168765223336711710932423087205062481972401529911612060874725022850609855185789171295622357273650505628847111991509903713656457003630229628911616, 8939916665811425580141366836799748460395618031759282509370497824299811419474520598634025244774112077168533579246229524606375815880674699882493888674393711129423049979969843020641851264680582634421245035804732150265478161167464939823961364600120076634896138053470967888192159338362145798206844039234528973177331392168343803655860463867964624053468361717880404551127148476595807610682682492509564605466666887124197305412475974338301286156982820081007429902371086309876414004250642742209268129028104430001341024273271485443135876232865781012624618299114525572069111065124822132752737596696540520863220362063905892073472]
#C = [10425426973362942141046535319591959825851184042398915444283085636467161454782312334694047298063568937598494286811130734106775959542421732118376386689410569679358906650609598466458311900033480717902566537922712536474467047069695609125072081243601283693891540058875030238545878699605703568946746127347310713999003013715147409029089113101955199403623115288567567350212280952548058257538787419833362252502694685042510935166945292054564566102545040036741135553501612782630720681656244490506480927368299238067688068912444604152379604276147004668207248378936031667033441953271083600688794144394723307242643896598762157566907, 15720510767687566474871582490047540164194625907444681327828061556080557353865253258850831018907605553743597821368863191606428150300226788897889367410204446924652734281628760346470779452032411761287648478258120611233125268290985419600321526372568114480899436316402187236622452886447315637019036924142320323163522565950915677843198283378046470101584655689207939338829190872222173714056931909004350515014331411977244518704274793972425339972995499566390538148377181114820265797601364490515368847761255932530056843744919763258635179058602245187649010927615615262901628173717599943605824978392597557648706733249460882358546]
#enc = b'\xf20\x17\x8a\\\xc1\xac8E\x1aI]\xab\x1br\x88eK\x89\xa8\xfc\x06\x18%\xccB4\x02\x12@2ju\x00\xc5u\x8e\xffV\xeb\xe6\x92$\xdc\xe0\x8a\x83\xca\xd8\xad'